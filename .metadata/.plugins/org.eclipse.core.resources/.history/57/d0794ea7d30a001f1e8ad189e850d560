package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import connection.SingleConnectionBanco;
import model.ModelCadastro;

public class DAOcadastro {

	private Connection connection;

	public DAOcadastro() {
		connection = SingleConnectionBanco.getConnection();
	}

	public ModelCadastro gravarCadastro(ModelCadastro objeto) {

		if (objeto.isNovo()) {
			try {

				String sql = "INSERT INTO cadastro (centrodecusto, funcao, nome, datanascimento, cpf, rg, aso, dataaso ) VALUES (?, ?, ?, ?, ?, ?, ?, ?);";

				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setString(1, objeto.getCentrodecusto());
				preparedStatement.setString(2, objeto.getFuncao());
				preparedStatement.setString(3, objeto.getNome());
				preparedStatement.setString(4, objeto.getDatanascimento());
				preparedStatement.setString(5, objeto.getCpf());
				preparedStatement.setString(6, objeto.getRg());
				preparedStatement.setString(7, objeto.getAso());
				preparedStatement.setString(8, objeto.getDataaso());

				preparedStatement.execute();
				connection.commit();

			} catch (Exception e) {
				e.printStackTrace();
			}

		} else {

			try {

				// Atualizar ------
				String sql = "UPDATE cadastro SET centrodecusto=?, funcao=?, nome=?, datanascimento=?, cpf=?, rg=?, aso=?, dataaso=? WHERE id =  "
						+ objeto.getId() + " ";
				PreparedStatement preparedStatement = connection.prepareStatement(sql);
				preparedStatement.setString(1, objeto.getCentrodecusto());
				preparedStatement.setString(2, objeto.getFuncao());
				preparedStatement.setString(3, objeto.getNome());
				preparedStatement.setString(4, objeto.getDatanascimento());
				preparedStatement.setString(5, objeto.getCpf());
				preparedStatement.setString(6, objeto.getRg());
				preparedStatement.setString(7, objeto.getAso());
				preparedStatement.setString(8, objeto.getDataaso());
				preparedStatement.execute();
				connection.commit();

			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return this.consultaUsuario(objeto.getNome());
	}

	public ModelCadastro consultaUsuario(String nome) {

		ModelCadastro model = new ModelCadastro();

		try {
			String sql = "select * from cadastro where upper(nome) = upper('" + nome + "')";

			PreparedStatement preparedStatement = connection.prepareStatement(sql);

			ResultSet resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {

				model.setCentrodecusto(resultSet.getString("centrodecusto"));
				model.setFuncao(resultSet.getString("funcao"));
				model.setNome(resultSet.getString("nome"));
				model.setDatanascimento(resultSet.getString("datanascimento"));
				model.setCpf(resultSet.getString("cpf"));
				model.setRg(resultSet.getString("rg"));
				model.setAso(resultSet.getString("aso"));
				model.setDataaso(resultSet.getString("dataaso"));

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return model;

	}

	public void atualizar(ModelCadastro daoCadastro) throws SQLException {

		String sql = "update cadastro set centrodecusto=?, funcao=?, nome=?, datanascimento=?, cpf=?, rg=?, aso=?, dataaso=? WHERE id = "
				+ daoCadastro.getId() + " ";

		PreparedStatement ps = connection.prepareStatement(sql);

		try {

			ps.setString(1, daoCadastro.getCentrodecusto());
			ps.setString(2, daoCadastro.getFuncao());
			ps.setString(3, daoCadastro.getNome());
			ps.setString(4, daoCadastro.getDatanascimento());
			ps.setString(5, daoCadastro.getCpf());
			ps.setString(6, daoCadastro.getRg());
			ps.setString(7, daoCadastro.getAso());
			ps.setString(8, daoCadastro.getDataaso());

			ps.execute();
			connection.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if (connection != null) {
				try {
					connection.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public void atualizarCadastro(ModelCadastro modelCadastro) throws SQLException {
		private Connection conn;
		//Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = getConnection(); // Método para obter a conexão com o banco de dados

			String sql = "UPDATE cadastro SET centrodecusto=?, funcao=?, nome=?, datanascimento=?, cpf=?, rg=?, aso=?, dataaso=? WHERE id=?";

			stmt = conn.prepareStatement(sql);
			stmt.setString(1, modelCadastro.getCentrodecusto());
			stmt.setString(2, modelCadastro.getFuncao());
			stmt.setString(3, modelCadastro.getNome());
			stmt.setString(4, modelCadastro.getDatanascimento());
			stmt.setString(5, modelCadastro.getCpf());
			stmt.setString(6, modelCadastro.getRg());
			stmt.setString(7, modelCadastro.getAso());
			stmt.setString(8, modelCadastro.getDataaso());
			stmt.setLong(9, modelCadastro.getId());

			stmt.executeUpdate();
		} finally {
			if (stmt != null) {
				stmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		}
	}

	public List<ModelCadastro> consultaUsuarioList() throws SQLException {

		List<ModelCadastro> retorno = new ArrayList<>();

		String sql = "SELECT * FROM cadastro";

		PreparedStatement statement = connection.prepareStatement(sql);

		statement.execute();

		ResultSet resultado = statement.executeQuery();

		while (resultado.next()) { /* percorrer as linhas de resultado do SQL */

			ModelCadastro modelCadastro = new ModelCadastro();

			modelCadastro.setId(resultado.getLong("id"));
			modelCadastro.setCentrodecusto(resultado.getString("centrodecusto"));
			modelCadastro.setFuncao(resultado.getString("funcao"));
			modelCadastro.setNome(resultado.getString("nome"));
			modelCadastro.setDatanascimento(resultado.getString("datanascimento"));
			modelCadastro.setCpf(resultado.getString("cpf"));
			modelCadastro.setRg(resultado.getString("rg"));
			modelCadastro.setAso(resultado.getString("aso"));
			modelCadastro.setDataaso(resultado.getString("dataaso"));

			retorno.add(modelCadastro);
		}

		return retorno;

	}

	public void deletarCadastro(String idUser) {

		try {

			String sql = "DELETE FROM cadastro WHERE id = ?;";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, Long.parseLong(idUser));
			preparedStatement.executeUpdate();
			connection.commit();

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

}
